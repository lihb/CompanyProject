<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
     http://www.springframework.org/schema/beans  
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
     
     http://www.springframework.org/schema/context  
     http://www.springframework.org/schema/context/spring-context-3.0.xsd  
     
     http://www.springframework.org/schema/tx 
     http://www.springframework.org/schema/tx/spring-tx.xsd 
     
     http://www.springframework.org/schema/aop
     http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
     
     http://www.springframework.org/schema/mvc  
     http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">  
     
     
       <!-- 加载配置文件 -->  
    <context:property-placeholder location="config.properties" />  
       <!-- 指定spring注解注入层-->  
    <context:component-scan base-package="com.lihb" />  
       <!-- 数据库连接池管理 -->
<!-- <bean id="c3p0DataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">  
    <property name="driverClass" value="${db.driverClass}"></property>  
    <property name="jdbcUrl" value="${db.jdbcUrl}"></property>  
    <property name="user" value="${db.user}"></property>  
    <property name="password" value="${db.password}"></property>  
    
   
    <property name="initialPoolSize" value="${db.initialPoolSize}"></property>  
    
    最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0    
    <property name="maxIdleTime" value="${db.maxIdleTime}"></property>
    连接池中保留的最大连接数。Default: 15  
    <property name="maxPoolSize" value="${db.maxPoolSize}"></property>  
    <property name="minPoolSize" value="${db.minPoolSize}"></property> 
     
     当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3     
    <property name="acquireIncrement" value="${db.acquireIncrement}"></property>
    两次连接中间隔时间，单位毫秒。Default: 1000  
    <property name="acquireRetryDelay" value="${db.acquireRetryDelay}"></property>
    定义在从数据库获取新连接失败后重复尝试的次数。Default: 30  
    <property name="acquireRetryAttempts" value="${db.acquireRetryAttempts}"></property>  
    获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试
 获取连接失败后该数据源将申明已断开并永久关闭。Default: false
    <property name="breakAfterAcquireFailure" value="${db.breakAfterAcquireFailure}"></property>  
      配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 
     <property name="timeBetweenEvictionRunsMillis" value="60000" />   
</bean> -->
<!-- 配置数据源 -->
	<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="url" value="${jdbc_url}" />
		<property name="username" value="${jdbc_username}" />
		<property name="password" value="${jdbc_password}" />

		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="20" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="0" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />

		<!-- <property name="poolPreparedStatements" value="true" /> <property name="maxPoolPreparedStatementPerConnectionSize" value="33" /> -->

		<property name="validationQuery" value="${validationQuery}" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />

		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />

		<!-- 监控数据库 -->
		<!-- <property name="filters" value="stat" /> -->
		<property name="filters" value="mergeStat" />
	</bean>

	<!-- myBatis文件 -->
	<!-- <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		自动扫描entity目录, 省掉Configuration.xml里的手工配置
		<property name="mapperLocations" value="classpath:com/_21cn/member/dao/impl/*.xml" />
	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com._21cn.member.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean> -->

<!-- ================================事务相关控制=================================================    -->

  <bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">    
          <property name="dataSource" ref="dataSource"></property>
  </bean>  
  
   <tx:advice id="userTxAdvice" transaction-manager="transactionManager">
    <tx:attributes>
      <tx:method name="delete*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" no-rollback-for="java.lang.RuntimeException"/>
      <tx:method name="insert*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.RuntimeException" />
      <tx:method name="update*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />    
      <tx:method name="find*" propagation="SUPPORTS"/>
      <tx:method name="get*" propagation="SUPPORTS"/>
      <tx:method name="select*" propagation="SUPPORTS"/>
    </tx:attributes>
  </tx:advice>
  
  <aop:config>    
    <aop:pointcut id="pc" expression="execution(public * com.lihb.service.*.*(..))" /> <!--把事务控制在Service层-->
    <aop:advisor pointcut-ref="pc" advice-ref="userTxAdvice" />
  </aop:config>
 
    
     <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
       <property name="dataSource" ref="dataSource" />  
       <property name="configLocation" value="MyBatis-Configuration.xml"/>      
    </bean>
    
    
    <bean  class="org.mybatis.spring.mapper.MapperFactoryBean"> 
       <property name="mapperInterface" value="com.lihb.mapper.UserMapper"/> 
       <property name="sqlSessionFactory" ref="sqlSessionFactory"/> 
    </bean> 
    
    <bean id="getThreadNum" class="com.lihb.MyServices.GetThreadNum">  
         <property name="userService" ref="userService" />  
    </bean>

   

</beans>